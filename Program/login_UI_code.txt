public void deleteClaimPolicyHolders(List<PolicyHolder> policyHolders, String policyHolderId,
                                         String claimId, String filePath) {
        String file
        for (PolicyHolder policyHolder : policyHolders) {
            if (policyHolder.getId().equals(policyHolderId)) {
                List<Claim> claims = policyHolder.getClaims();
                for (Iterator<Claim> iterator = claims.iterator(); iterator.hasNext();) {
                    Claim claim = iterator.next();
                    if (claim.getId().equals(claimId)) {
                        iterator.remove();
                        System.out.println("Deleted");
                        try {
                            // Write the updated list of policy holders to JSON file
                            writePolicyHoldersToJson(policyHolders, filePath);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        return;
                    }
                }
                System.out.println("Claim with ID " + claimId + " not found for policy holder with ID " + policyHolderId);
                return;
            }
        }
        System.out.println("Policy holder with ID " + policyHolderId + " not found.");
    }



public void addClaimToHolder(List<PolicyHolder> holders, String policyHolderId, Claim claim, String filePath) {
        for (PolicyHolder holder : holders) {
            if (holder.getId().equals(policyHolderId)) {
                holder.getClaims().add(claim);
                System.out.println("Added claim");
                try {
                    // Write the updated list of dependents to JSON file
                    writePolicyHoldersToJson(holders, filePath);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return;
            }
        }
        System.out.println("PolicyHolder not found.");
    }